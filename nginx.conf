user nobody;
worker_processes auto;
pid /tmp/nginx.pid;
pcre_jit on;

events {
    worker_connections 200000;
}

http {
    include /usr/local/openresty/nginx/conf.default/mime.types;
    log_format custom   '$remote_addr $host [$time_iso8601] $request_time '
                        '"$request" $status $body_bytes_sent $request_length '
                        '"$http_referer" "$http_user_agent" "$upstream_cache_status" $upstream_addr $upstream_response_time';
    access_log /dev/stdout custom;
    error_log /dev/stderr error;

    # Set your certs here.
    ssl_certificate /keystore/bundle-crt.pem;
    ssl_certificate_key /keystore/key.pem;

    # Set your DNS server here.
    resolver 127.0.0.1 valid=10s ipv6=off;

    ### LUA settings ###
    # Pattern of lua files to include.
    lua_package_path "/usr/local/openresty/nginx/conf/?.lua;;";
    # Path to CA bundle so lua code can securely connect via https to external hosts.
    lua_ssl_trusted_certificate /keystore/ca-certificates.crt;
    lua_ssl_verify_depth 2;
    # Lua dictionary for Consul SD data. Should be named the same as in consul-balancer.lua
    lua_shared_dict consul_cache 256k;

    init_by_lua_block {
        consul = require("consul-balancer")
        consul_services = {
            ["foobar-service"]={custom_healthcheck="/elb-healthcheck", any_consul_state=true},
            ["another-service"]={},
        }
        consul_endpoints = {"https://consul-server1:8500", "https://consul-server2:8500"}
        consul_token_func = function()
            return "secret"
        end
    }

    init_worker_by_lua_block {
        local interval = 5
        ngx.timer.every(interval, consul.refresh, {
            endpoints=consul_endpoints, token_func=consul_token_func, interval=interval, services=consul_services
        })
    }

    # Main vhost.
    server {
        listen 443 ssl http2;
        server_name localhost;

        location / {
            proxy_pass https://foobar_service;
        }

        location /another {
            set $delayed_retry 1;
            proxy_pass https://another_service;
        }

        # Consul SD status page.
        location = /status {
            access_by_lua_block {
                consul.print_status({is_debug=ngx.var.arg_debug, services=consul_services})
            }
        }
    }

    # Upstream services.
    upstream foobar_service {
        server 0.0.0.1;
        balancer_by_lua_block { consul.balance({service="foobar-service"}) }
        keepalive 10;
    }

    upstream another_service {
        server 0.0.0.1;
        balancer_by_lua_block { consul.balance({service="another-service"}) }
        keepalive 10;
    }


    # Optional sleep_server - used during a delayed retries.
    server {
        listen 127.0.0.1:81 ssl http2 default_server;
        server_name _;

        location / {
            access_log off;
            access_by_lua_block {
                ngx.sleep(5)
                ngx.status = ngx.HTTP_SERVICE_UNAVAILABLE
                ngx.exit(ngx.HTTP_OK)
            }
        }
    }
}
